Developer Tasks Log

============================================

Tasks are sorted as follows:

CATEGORY
    - Dev Task A) (length, if applicable)
        - Subtask a:
    - Dev Task B)
        * user comment(s)

NOTE: All  tasks that are unmarked for time are assumed to take 1 hours
NOTE: Name next to task denotes who completed said task
NOTE: We are having problem with our storage staying across multiple activities, but that should be solved with
      with the adding of an actual database

==========================================


BASIC TIMER IMPLEMENTATION (ERIC)
- Implement Basic Timer backend code (1 day)
    - Store elapsed time as a long (as stated in the docs for Time variables)
    - Start Method: Record start time
    - Create Function to calculate current elapsed time
        * via difference between recorded time in start method and current time
    - Stop Method: Calculate final difference between start time and current time
    - Create function to reset elapsed time variable
        *for reset
    - Create function to save elapsed time to file
    - Create function to add delays to timer (3 hours)
        *use variables for pre and post timings
    - Create function to save current time to file (3 hours)
    - Create function to retrieve past times from file (3 hours)
    - Create function to compare current time to previous saved times

LAP IMPLEMENTATION (SHOULDN'T NEED TO BE DONE)
- Implement Lap backend code (1 day)
    - Create function that records time segments
        *Java calculates elapsed time as a difference between two "Date" objects (result is a Long)
    - Create java class that dynamically holds lap segments together from a single run
        *probably linked list
    - Add functionality to stop method (from BASIC TIMER) to also stop the last split segment

INTERFACE (ERIC)
- Create Main Menu Interface on startup (1 day)
- Add menu to allow user to switch between interfaces (clock, past times, scramble, etc) (1 day)
    - Viewable on every interface

MAIN MENU INTERFACE (ERIC)
- Add buttons that allow the user to access other user interfaces (1 hrs)

TIMER INTERFACE (ERIC & RANDY & MARK)
- Add Main Timer functionality
    - Call Current time function multiple times/second
- Add Start Button to interface with functionality
- Add Stop Button to interface with functionality
    *or combine Start and Stop Button functionality into a single button
    *or add functionality upon user screen touch (THIS IS WHAT WE WILL DO)
- Add Menu to view past times

RANDOM SCRAMBLE GENERATOR (ERIC)
- Create enum type to add a numeric value to each turn type
- Generate random moves and string them together
- Make sure that the scramble has zero redundancies
- Find way to display scramble to the screen and have it change after every time the timer stops

STORAGE (JETRO)
- Create a Time class as main unit of measurement
	*Used to hold both split and full run times
	*(needs another name, Time is already a [depreciated] Java class)
- Create form of storage for Time storage
	for prototype, create arraylist which is updated on timer stop
	for finished version, transfer from arraylist to persistent storage
		Savefile? Database?

NOTES:
(Eric)
- Spliting times isn't something we need to be worried about.
- Linked List implementation is just ArrayList, so use that.
- Storage should just be an ArrayList for now, then next iter we'll move to an SQL Database.





