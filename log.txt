Developer Tasks Log

============================================

Tasks are sorted as follows:

CATEGORY
    - Dev Task A) (length, if applicable)
        - Subtask a)
    - Dev Task B)
        * user comment(s)

NOTE: All tasks that are unmarked for time are assumed to take 1 hours
NOTE: Name next to task denotes who completed said task
NOTE: We are having problem with our storage staying across multiple activities, but that should be solved with
      with the adding of an actual database

==========================================


BASIC TIMER IMPLEMENTATION (ERIC)
- Implement Basic Timer backend code (1 day)
    - Store elapsed time as a long (as stated in the docs for Time variables) (10min)
    - Start Method: Record start time (10min)
    - Create Function to calculate current elapsed time (30min)
        * via difference between recorded time in start method and current time
    - Stop Method: Calculate final difference between start time and current time (10min)
    - Reset Method: Resets start and elapsed time back to 0 between runs (5 mins)
    - Create function to save elapsed time to file (5min)
    - Create function to save current time to file (~1 hours)
    - Create function to retrieve past times from file (5 hours)
    - Create function to display long value as a readable String (30 mins)

LAP IMPLEMENTATION (SHOULDN'T NEED TO BE DONE)
- Implement Lap backend code (1 day)
    - Create function that records time segments
        *Java calculates elapsed time as a difference between two "Date" objects (result is a Long)
    - Create java class that dynamically holds lap segments together from a single run
        *probably linked list
    - Add functionality to stop method (from BASIC TIMER) to also stop the last split segment

INTERFACE (ERIC)
- Create Main Menu Interface on startup (8 hours)
- Add menu to allow user to switch between interfaces (clock, past times, scramble, etc) (8 hours)
    - Viewable on every interface

MAIN MENU INTERFACE (ERIC)
- Add buttons that allow the user to access other user interfaces (6 hours)

TIMER INTERFACE (ERIC & RANDY & MARK)
- Add Main Timer functionality (3 hours)
    - Call Current time function multiple times/second
	- Add Start Button to interface with functionality
	- Add Stop Button to interface with functionality
    		*or combine Start and Stop Button functionality into a single button
    		*or add functionality upon user screen touch (THIS IS WHAT WE WILL DO)

RANDOM SCRAMBLE GENERATOR (ERIC)
- Create enum type to add a numeric value to each turn type (1 hour)
- Generate random moves and string them together (3 hours)
- Make sure that the scramble has zero redundancies (4 hours)
- Find way to display scramble to the screen and have it change after every time the timer stops (1 hour)

STORAGE (JETRO)
- Create a Time class as main unit of measurement (1 hour)
    - Store time measurement as a long value in Timer class (5 mins)
	*Used to hold both split and full run times (not needed)
	*(needs another name, Time is already a [depreciated] Java class)
- Create form of storage for Time storage (2 hours)
	for prototype, create arraylist which is updated on timer stop
	for finished version, transfer from arraylist to persistent storage
		Savefile? Database?

FILE ORGANIZATION (MARK)
- Set up classes/methods according to 3-layer model
    - Move processing away from interface class to respective business classes

TEST SUITES (ERIC & MARK)
- Set up test files for each class
    - Moves (30 mins)
    - ScrambleGenerator (20 mins)
    - Timer (30 mins)
    - CalculateAverages
    - DataAccess
- Run tests to confirm validity (2 hours)
- Create Test Suite to run all tests


NOTES:
(Eric)
- Spliting times isn't something we need to be worried about.
- Linked List implementation is just ArrayList, so use that.
- Storage should just be an ArrayList for now, then next iter we'll move to an SQL Database.

FOR MARKER:
The titles reflect our user stories from iteration 1, and each bullet underneath are essentially dev tasks.

ITERATION 2: ---------------------------------------------------------------------------------------

CUSTOMIZABLE USER INTERFACE (9 Days) (DIDN'T GET AROUND TO THIS ITERATION)

15 SECOND INSPECTION
- Find way to count down before timer starts (3 hours)
- Make sure that there is a way to differentiate it from a normal time (30 min)
    - Change the colour? (Went with this) (10 min)
    - Change the text-size?
- Be able to start timer from any point during 15 sec countdown (1 hour)

VIEW PREVIOUS TIMES
- View all the previous times in the previous times screen (1 hour)
- Be able to delete a time (2 hours)
- Be able to modify a time (3 hours)
    - Adding plus 2 seconds
- Change a time to DNF (6 hours)

VIEW TIMES AS A GRAPH
- Figure out how to add a graph (4 hours)
- Be able to represent data from DB (2 hours)
- See progress over time?
- Add the graph to a new activity (3 hours)

SEPARATE SESSIONS
- Have separate solving sessions
- change the scramble for different puzzle types (5 hours)
    - 2x2x2
    - 3x3x3
- Add new DB tables for different puzzles (NOT DONE) (NEXT ITERATION I GUESS)

FOR MARKER:
The titles reflect our user stories from iteration 2, and each bullet underneath are essentially dev tasks.


ITERATION 3: ---------------------------------------------------------------------------------------

Dev Tasks:

Delete and modify times (2 hours) MARK
    - In timelist add modifiers/delete
    - Add button to clear all times

Menu to change colour of the background (5 hours) JETRO
    - Do same as the scramble selection

Add the puzzle type to the database (5 hours) MARK [DID NOT FINISH THIS ITERATION]
    - Make sure the puzzle type displays on the timelist
    - When you switch the puzzle type it should add that time with the selected puzzle type tag in the database
    - Be able to select the times from the selected puzzle on the timelist view

Add sounds (4 hours) ERIC
    - After the countdown expires
    - If the time you just finished is better than all other times


NOTES and LOG:

Worked on changing of the colours and finished (JETRO)
    - Maybe get rid of the blue? Doesn't contrast well with the black text.
Finished getting the sounds going for what was specified (ERIC)
    - Speakers on tablet are broken
        - Show up early to presentation to test
Got deletions going (RANDY & MARK) (PAIR PROGRAMMING)
Refactored the code so that we are no longer violating any good code practices (Mark)





